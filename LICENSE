MIT License

Copyright (c) 2022 vanilson muhongo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


package mindswap.academy;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main {

    static int numberWithMoreOccurency = 0;
    static int maxCount = 0;

    private static List<Integer> memo = new ArrayList<>(Arrays.asList(0, 1));
    int sum = 0;

    public static void main(String[] args) {
        /* Exercise 1  */
        int numb = 1000;
        int[] sumNumer = new int[]{2, 3, 4, 6, 5, 7, 9, 8};
        List<Integer> integers = Arrays.asList(1, null);
        Map<Integer, Integer> memoizeTable = new HashMap<>(); //

        //     System.out.println("total sum : " + returnTheSumOfParNumber(sumNumer));
//         System.out.println("total sum : " + returnTheSumOfParNumber(integers));
//        System.out.println("total sum using list :" + returnTheSumOfParNumber(integers));

        /*   /* Exercise 2 */
//        int[] number = new int[]{1, 2, 3, 3, 4, 3, 4, 2, 2, 2, 7, 7};
//        System.out.println(returnTheNumberTheOccurMoreTimeInArray(number));
//
        /* Exercixe 3 recursive */
         System.out.println("fibonacci recursive:" + returnTheSumOfAllNumbersFibonacciSequenceRecursive(numb));

//
//        /* Exercixe 3.1 not recursive */
//        System.out.println("Fibonnaci Not Recursive ");
//        for (int i = 1; i <= 10; i++) System.out.print("\t" + returnTheSumOfAllNumbersFibonacciSequenceNotRecursive(i));
    }

    /**
     * exercise 1 ->  faz um metodo que recebe um array de
     * inteiros e retorna a soma dos numeros pares
     */

    public static int returnTheSumOfParNumber(int[] number) {
        int sum = 0;
        for (int i = 0; i < number.length; i++) {
            if ((number[i] % 2) == 0) {
                sum += number[i];
            }
        }
        return sum;
    }

    /**
     * exercise 1.1 ->  faz um metodo que recebe uma lista de
     * * inteiros e retorna a soma dos numeros pares
     */

    public static int returnTheSumOfParNumber(List<Integer> number) {
        return number.stream().filter(numbers -> (numbers % 2) == 0)
                     .mapToInt(numbers -> numbers)
                     .sum();
    }

    /**
     * exercise 2 -> Faz um metodo que recebe
     * uma lista de inteiros e retorna o nÂº mais frequente
     */
    public static int returnTheNumberTheOccurMoreTimeInArray(int[] number) {
        for (int i = 0; i < number.length; i++) {
            int count = 0;
            for (int j = 0; j < number.length; j++) {
                if (number[i] == number[j]) {
                    count++;
                }
                if (count > maxCount) {
                    numberWithMoreOccurency = number[i];
                    maxCount = count;
                }
            }
        }
        return numberWithMoreOccurency;
    }

    /**
     * exercise 3 ->faz um metodo que recebe um inteiro n e
     * retorna a soma de todos os numeros da sequencia
     * de fibonacci ate o numero n (resolver ambas maneiras recursiva e nao recursiva)
     */
    private static int returnTheSumOfAllNumbersFibonacciSequenceRecursive(int numb) {

        if (numb >= memo.size()) {
            memo.add(numb, returnTheSumOfAllNumbersFibonacciSequenceRecursive(numb-1) + returnTheSumOfAllNumbersFibonacciSequenceRecursive(numb-2));
        }
        return memo.get(numb);

    }

    /**
     * exercise 3.1 ->faz um metodo que recebe um inteiro n e
     * retorna a soma de todos os numeros da sequencia
     * de fibonacci ate o numero n (resolver ambas maneiras recursiva e nao recursiva)
     */
    private static int returnTheSumOfAllNumbersFibonacciSequenceNotRecursive(int numb) {
        int nextNumber = 0, previousNumber = 0, previewNumber = 1;

        if (numb == 1) {
            return 0;
        }
        if (numb == 2) {
            return 1;
        }

        for (int i = 3; i <= numb; i++) {

            nextNumber = previousNumber + previewNumber;
            previewNumber = previousNumber;
            previousNumber = nextNumber;


        }
        return nextNumber;
    }


}
